"""Blueprint Resources (Ресурсы чертежей)"""

# Чертежи также могут предоставлять ресурсы. Иногда вы можете захотеть ввести план только для
# тех ресурсов, которые он предоставляет.

"""Blueprint Resource Folder (Папка ресурсов чертежа)."""

# Как и для обычных приложений, чертежи считаются содержащимися в папке. Хотя несколько
# чертежей могут происходить из одной и той же папки, это не обязательно так, и обычно это
# не рекомендуется.

# Папка выводится из второго аргумента Blueprint, который обычно имеет значение __name__. Этот
# аргумент указывает, какой логический модуль или пакет Python соответствует схеме. Если он
# указывает на реальный пакет Python, этот пакет (который является папкой в файловой системе)
# является папкой ресурсов. Если это модуль, пакет, в котором содержится модуль, будет папкой
# ресурсов. Вы можете получить доступ к свойству Blueprint.root_path, чтобы узнать, что такое
# папка ресурсов:

from flask import Blueprint
from My_First_Blueprint import simple_page

print(simple_page.root_path)
# '/home/vadim/PycharmProjects/learning_flask/User’s_Guide/
# Modular_Applications_with_Blueprints'

# Чтобы быстро открыть исходники из этой папки, вы можете использовать функцию
# open_resource():
"""
with simple_page.open_resource('static/style.css') as f:
    code = f.read()
"""
# Static Files (Статические файлы).

# Схема может предоставить папку со статическими файлами, указав путь к папке в файловой
# системе с аргументом static_folder. Это либо абсолютный путь, либо относительный путь к
# местоположению чертежа:

admin = Blueprint('admin', __name__, static_folder='static')

# По умолчанию крайняя правая часть пути отображается в Интернете. Это можно изменить с
# помощью аргумента static_url_path. Поскольку папка здесь называется статической, она будет
# доступна по префиксу url_prefix схемы + /static. Если схема имеет префикс /admin,
# статический URL-адрес будет /admin/static.

# Конечная точка называется blueprint_name.static. Вы можете генерировать URL-адреса для
# него с помощью url_for(), как и для статической папки приложения:
"""
url_for('admin.static', filename='style.css')
"""

# Однако если у схемы нет префикса url_prefix, доступ к статической папке схемы будет
# невозможен. Это связано с тем, что в этом случае URL-адрес будет /static, а маршрут
# приложения /static имеет приоритет. В отличие от папок шаблонов, поиск статических папок
# схемы не выполняется, если файл не существует в статической папке приложения.

# Templates (Шаблоны)

# Если вы хотите, чтобы схема отображала шаблоны, вы можете сделать это, указав параметр
# template_folder конструктору схемы:

admin = Blueprint('admin', __name__, template_folder='templates')

# Для статических файлов путь может быть абсолютным или относительным относительно папки
# ресурсов схемы.
# Папка шаблона добавляется в путь поиска шаблонов, но с более низким приоритетом, чем папка
# шаблона фактического приложения. Таким образом, вы можете легко переопределить шаблоны,
# которые схема предоставляет в реальном приложении. Это также означает, что если вы не
# хотите, чтобы шаблон схемы был случайно переопределен, убедитесь, что никакая другая схема
# или фактический шаблон приложения не имеет такого же относительного пути. Когда несколько
# чертежей предоставляют один и тот же относительный путь к шаблону, первый зарегистрированный
# чертеж имеет приоритет над остальными.
# Поэтому, если у вас есть blueprint в папке yourapplication/admin, и вы хотите отобразить шаблон
# 'admin/index.html', и вы предоставили шаблоны в виде папки template_folder, вам нужно
# будет создать такой файл: yourapplication/admin/templates/admin/index.html. Причина
# использования дополнительной папки администратора заключается в том, чтобы избежать
# переопределения нашего шаблона шаблоном с именем index.html в фактической папке шаблона
# приложения.
# Повторяем еще раз: если есть blueprint с именем admin и необходимо отобразить специфичный
# для этого blueprint шаблон с именем index.html, то лучше всего расположить шаблоны
# следующим образом:
"""
yourpackage/
    blueprints/
        admin/
            templates/
                admin/
                    index.html
            __init__.py
"""
# А затем, когда вы хотите отобразить шаблон, используйте admin/index.html в качестве имени
# для поиска шаблона. Если вы столкнулись с проблемами при загрузке правильных шаблонов,
# включите переменную конфигурации EXPLAIN_TEMPLATE_LOADING, которая будет указывать
# Flask распечатывать шаги, которые он выполняет для поиска шаблонов при каждом вызове
# render_template.
