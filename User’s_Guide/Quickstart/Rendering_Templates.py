# Rendering Templates (Шаблоны визуализации)

# Генерация HTML из Python — это не весело и на самом деле довольно громоздко, потому что
# вы должны самостоятельно экранировать HTML, чтобы обеспечить безопасность приложения.
# Из-за этого Flask автоматически настраивает механизм шаблонов Jinja2.
# Шаблоны можно использовать для создания любого типа текстового файла. Для
# веб-приложений вы в первую очередь будете генерировать HTML-страницы, но вы также
# можете генерировать уценку, обычный текст для электронных писем и что-то еще.
# Справку по HTML, CSS и другим веб-API см. в веб-документах MDN.
# Для рендеринга (визуализации) шаблона вы можете использовать метод render_template().
# Все, что вам нужно сделать, это указать имя шаблона и переменные, которые вы хотите
# передать обработчику шаблонов в качестве аргументов ключевого слова. Вот простой
# пример того, как отобразить шаблон:
from flask import Flask
from flask import render_template
from markupsafe import Markup

app = Flask(__name__)


@app.route('/hello/')
@app.route('/hello/<name>')
def hello(name=None):
    return render_template('hello.html', name=name)


print(Markup('<strong>Hello %s!</strong>') % '<blink>hacker</blink>')
Markup('<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')
print(Markup.escape('<blink>hacker</blink>'))
Markup('&lt;blink&gt;hacker&lt;/blink&gt;')
print(Markup('<em>Marked up</em> &raquo; HTML').striptags())
'Marked up » HTML'

if __name__ == '__main__':
    app.run(debug=True, host='localhost', port=5005)

# Flask будет искать шаблоны в папке шаблонов. Итак, если ваше приложение является
# модулем, эта папка находится рядом с этим модулем, если это пакет, то он находится
# внутри вашего пакета:

# Case 1: a module:
"""
/application.py
/templates
    /hello.html
"""

# Case 2: a package:
"""
/application
    /__init__.py
    /templates
        /hello.html
"""
# Для шаблонов вы можете использовать всю мощь шаблонов Jinja2. Перейдите к официальной
# документации по шаблону Jinja2 для получения дополнительной информации.

# Вот пример шаблона:
"""
<!doctype html>
<title>Hello from Flask</title>
{% if name %}
  <h1>Hello {{ name }}!</h1>
{% else %}
  <h1>Hello, World!</h1>
{% endif %}
"""

# Внутри шаблонов у вас также есть доступ к объектам config, request, session и g [1], а также
# к функциям url_for() и get_flashed_messages().
# Шаблоны особенно полезны, если используется наследование. Если вы хотите узнать, как это
# работает, см. раздел Template Inheritance (Наследование шаблонов). В основном наследование
# шаблонов позволяет сохранять определенные элементы на каждой странице (такие как
# заголовок, навигация и нижний колонтитул).
# Включено автоматическое экранирование, поэтому, если имя содержит HTML, оно будет
# экранировано автоматически. Если вы можете доверять переменной и знаете, что это будет
# безопасный HTML (например, потому что он получен из модуля, преобразующего вики-разметку в
# HTML), вы можете пометить ее как безопасную с помощью класса Markup или с помощью фильтра
# |safe в шаблон. Перейдите к документации Jinja 2 для получения дополнительных примеров.
# Вот основное введение в то, как работает класс Markup:
"""
Markup('<strong>Hello %s!</strong>') % '<blink>hacker</blink>'
Markup('<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')

Markup.escape('<blink>hacker</blink>')
Markup('&lt;blink&gt;hacker&lt;/blink&gt;')

Markup('<em>Marked up</em> &raquo; HTML').striptags()
'Marked up » HTML'
"""

# Список изменений
# Изменено в версии 0.5: Автоматическое экранирование больше не включено для всех шаблонов.
# Следующие расширения для шаблонов вызывают автоматическое экранирование: .html, .htm, .xml,
# .xhtml. Для шаблонов, загруженных из строки, автоматическое экранирование будет отключено.
#
# [1] Не знаете, что это за объект g? Это то, в чем вы можете хранить информацию для своих
# нужд. См. документацию для flask.g и Использование SQLite 3 с Flask.
