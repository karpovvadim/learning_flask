# Redirects and Errors (Ошибки и перенаправления)
#
# Чтобы перенаправить пользователя на другую конечную точку, используйте функцию redirect();
# чтобы прервать запрос досрочно с кодом ошибки, используйте функцию abort():

from flask import render_template
from flask import abort, redirect, url_for

from API_Reference.example import app
# app = Flask(__name__)


@app.route('/')
def index():
    return redirect(url_for('login'))


def this_is_never_executed():
    return "Это довольно бессмысленный пример, потому что пользователь будет перенаправлен" \
           " из индекса на страницу, к которой он не может получить доступ" \
           " (401 означает отказ в доступе), но он показывает, как это работает."


@app.route('/login')
def login():
    abort(401)
    this_is_never_executed()


# Это довольно бессмысленный пример, потому что пользователь будет перенаправлен из индекса
# на страницу, к которой он не может получить доступ (401 означает отказ в доступе),
# но он показывает, как это работает.

# По умолчанию для каждого кода ошибки отображается черно-белая страница ошибки. Если вы
# хотите настроить страницу ошибки, вы можете использовать декоратор errorhandler():


@app.errorhandler(404)
def page_not_found(error):
    return render_template('page_not_found.html'), 404


if __name__ == '__main__':
    app.run(debug=True, host='localhost', port=5005)

# Обратите внимание на ошибку 404 после вызова render_template(). Это сообщает Flask, что
# код состояния этой страницы должен быть 404, что означает, что она не найдена. По
# умолчанию предполагается 200, что означает: все прошло хорошо.

# Дополнительные сведения см. в разделе Handling Application Errors
# (Обработка ошибок приложений).
