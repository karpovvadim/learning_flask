# URL Building (Построение (генерация) URL)

# Чтобы создать URL-адрес для определенной функции, используйте функцию url_for(). Он
# принимает имя функции в качестве первого аргумента и любое количество аргументов
# ключевого слова, каждый из которых соответствует переменной части правила URL.
# Неизвестные переменные части добавляются к URL-адресу в качестве параметров запроса.

# Почему вы хотите создавать URL-адреса с помощью функции реверсирования URL-адресов
# url_for() вместо того, чтобы жестко кодировать их в своих шаблонах?

# 1. Реверсирование часто более описательно, чем жесткое кодирование URL-адресов.
# 2. Вы можете изменить свои URL-адреса за один раз, вместо того, чтобы помнить,
#    что нужно вручную изменять жестко закодированные URL-адреса.
# 3. Создание URL прозрачно обрабатывает экранирование специальных символов.
# 4. Сгенерированные пути всегда являются абсолютными, что позволяет избежать
#    неожиданного поведения относительных путей в браузерах.
# 5. Если ваше приложение размещено за пределами корня URL-адреса, например,
#    в /myapplication вместо /, url_for() правильно обработает это за вас.

# Например, здесь мы используем метод test_request_context(), чтобы опробовать url_for().
# test_request_context() указывает Flask вести себя так, как будто он обрабатывает
# запрос, даже если мы используем оболочку Python. См. Локальные контексты.

from flask import Flask
from flask import url_for

app = Flask(__name__)


@app.route('/')
def index():
    return 'index'


@app.route('/login')
def login():
    return 'login'


@app.route('/user/<username>')
def profile(username):
    return f'{username}\'s profile'


with app.test_request_context():
    print(url_for('index'))
    print(url_for('login'))
    print(url_for('login', next='/'))
    print(url_for('profile', username='John Doe'))

if __name__ == '__main__':
    app.run(debug=True, host='localhost', port=5005)

# Здесь также использован метод test_request_context(). Он просит Flask вести себя так,
# как будто он обрабатывает запрос, даже если мы взаимодействуем с ним через оболочку
# Python.
